#!/bin/bash
set -ex

# Cannot set -u before sourcing .bashrc because of all
# the unbound variables in things beyond our control.
source ~/.bashrc

set -u

root_dir=${PWD}

# Inputs
BOSH_LITE_IP_DIR="${root_dir}/${BOSH_LITE_IP_DIR:?"\$BOSH_LITE_IP_DIR not set"}"
BOSH_LITE_STEMCELL_DIR="${root_dir}/${BOSH_LITE_STEMCELL_DIR:?"\$BOSH_LITE_STEMCELL_DIR not set"}"
CF_RELEASE_DIR="${root_dir}/${CF_RELEASE_DIR:?"\$CF_RELEASE_DIR not set"}"
CF_ROUTING_RELEASE_DEVELOP="${root_dir}/${CF_ROUTING_RELEASE_DEVELOP:?"\$CF_ROUTING_RELEASE_DEVELOP not set"}"
CF_RELEASE_MANIFEST_DIR="${root_dir}/${CF_RELEASE_MANIFEST_DIR:?"\$CF_RELEASE_MANIFEST_DIR not set"}"
DOMAIN="${DOMAIN:?"\$DOMAIN not set"}"
BOSH_ADMIN_PASSWORD="${BOSH_ADMIN_PASSWORD:?"BOSH_ADMIN_PASSWORD must be provided"}"

configure() {
  export BOSH_LITE_IP="$(cat "${BOSH_LITE_IP_DIR}/bosh-lite-ip")"
}

log_in_to_bosh_lite() {
  set +e
  local bosh_password=$1
  n=0
  while [ true ]
  do
    # The bosh director may not yet be available
    bosh -n target "${BOSH_LITE_IP}" && break
    n=$[$n+1]
    if [ $n ge 5 ]
    then
      exit 1
    fi
    sleep 15
  done
  set -e
  bosh login admin ${bosh_password}
}

upload_stemcell() {
  bosh upload stemcell \
    --skip-if-exists \
    "${BOSH_LITE_STEMCELL_DIR}"/*.tgz
}

build_manifest() {
  pushd "${CF_RELEASE_DIR}" > /dev/null

  cat > "${root_dir}/overrides.yml" <<EOF
properties:
  cc:
    default_to_diego_backend: true
    security_group_definitions:
      - name: load_balancer
        rules:
        - protocol: all
          destination: ${BOSH_LITE_IP}

EOF

  scripts/generate-bosh-lite-dev-manifest "${root_dir}/overrides.yml" "${root_dir}/deployments-routing/catwoman/overrides.yml"

  CF_RELEASE_MANIFEST="${CF_RELEASE_DIR}/bosh-lite/deployments/cf.yml"

  # Set system_domain and apps_domains to correct domain instead of bosh-lite.com
  sed -i'' -e "s/bosh-lite.com/$DOMAIN/g" $CF_RELEASE_MANIFEST

  popd > /dev/null

  mkdir -p $CF_RELEASE_MANIFEST_DIR
  cp $CF_RELEASE_MANIFEST ${CF_RELEASE_MANIFEST_DIR}/cf.yml
}

create_and_deploy_release() {
    rm -rf "$CF_RELEASE_DIR"/src/routing-release
    cp -r "${CF_ROUTING_RELEASE_DEVELOP}" "$CF_RELEASE_DIR"/src/routing-release

    pushd "${CF_RELEASE_DIR}"
      bosh -n create release --name cf --force
      bosh -n upload release --name cf --rebase --skip-if-exists
    popd

    bosh -n -d "${CF_RELEASE_MANIFEST}" deploy
}

main() {
  configure
  log_in_to_bosh_lite ${BOSH_ADMIN_PASSWORD}
  upload_stemcell
  build_manifest
  create_and_deploy_release
}

main
